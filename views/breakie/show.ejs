    <div class="col-md-3">
        <p id="breakie" style="display: none; "><%= JSON.stringify(breakie) %></p>
        <div id="breakieInfo">
            <h5 class="orange-text display-inline"><%= breakie.name %>  </h5>
            <span class="badge badge-pill badge-secondary"><%= breakie.cuisine.type %></span>
            <% if (currentUser != null && currentUser._id.equals(breakie.creator._id) ) { %>
                <a class="orange-text ml-2" href="/breakie/edit/<%= breakie._id %>"><i class="fas fa-edit"></i></a>
            <% } %>    
            <img class="display-block" src="/image/<%= breakie.image %>" alt="Meow">
            <a class="purple-text" id="creator" href="/user/show/<%= breakie.creator._id %>">@<%= breakie.creator.username %></a>
            <p class="grey-text mb-1"><%= breakie.desc %></p>
            <span class="medium-text purple-text" id="addr"><%= breakie.creator.address %></span>
            <h5 class="orange-text">Ingredients</h5>
            <% breakie.ingredients.forEach( ing => { %>
                <span class="badge badge-pill badge-secondary"><%= ing.type %></span>
            <% }) %>
        </div>
    </div>
    <div class="col-md-9">
        <div id="indi-breakie-map" class="mt-2">
            Google Maps
        </div>
        <div class="show-cal-price purple-text medium-text center-text mt-2">

            <% if (breakie.qty <= 0) { %>
               <p>This dish is sold out! Come back another time.</p>
            <% } else { %>
                <div class="display-inline">
                    <span>$</span><span id="price"><%= breakie.price %>   x</span> 
                </div>    
                <input class="center-text display-inline form-control" style="width: 50px;" type="number" value="1" min="1" name="qty" id="qty" max="<%= breakie.qty %>" required>
            <% } %>
            <% if (currentUser == null) { %> 
                <!-- person does not have account -->
                <a class="btn-gradient mt-2 btn-width" href="/auth/login">Login</a>
            <% } else if (!currentUser._id.equals(breakie.creator._id)) { %>
                <!-- this person has an account && > qty -->
                <% if (breakie.qty > 0) { %> 
                    <p class="center-text mt-2 mb-0">Total: $<span id="totalPrice"><%= breakie.price %></span></p>
                    <button type="submit" class="btn-gradient mt-2" id="immediatePost" type="submit">Order</button>
                <% } %> 
            <% } %> 
        </div> 
    </div>
<script src="https://checkout.stripe.com/checkout.js"></script>
<script defer>
    let sellerHasBankAcc = <%= sellerHasBankAcc %>;
    console.log(sellerHasBankAcc);
    let qty = document.getElementById("qty");
    let totalPrice = document.getElementById("totalPrice");
    let beautifulOrange = "#ff8e3c";
    // @desc updates the price
    qty.addEventListener('change', updateTotalPrice => {
        totalPrice.textContent = parseInt(event.target.value) * parseInt(document.getElementById("price").textContent);        
    });

    document.getElementById("immediatePost").addEventListener('click', purchase);

    // @desc event when purchase button is called
    function purchase() {
        if ('<%- user %>' == "") return;
        let user = <%- JSON.stringify(user) %>;
        user = JSON.parse(user);
        if (user.bankAcc && sellerHasBankAcc) { return placeOrder; } // place order directly
        Swal.fire({
            title: "How would you like to pay?",
            confirmButtonText: "Cash",
            showCancelButton: sellerHasBankAcc ? true : false, // @change this to false to show Stripe activity
            cancelButtonText: "Card",
            confirmButtonColor: beautifulOrange
        }).
        then( result => {
            if (result.value) payByCash(); // for now, this sends to me
            else payByCard();
        })
    }
    
    // @desc helper functions 
    function getObj() {
        let breakieId = window.location.href.split("show/")[1];
        return obj = {
            price: document.getElementById("totalPrice").textContent,
            items: [{
                breakie: breakieId,
                qty: parseInt(document.getElementById("qty").value)
            }]
        };
    }
    function successSwal() {
        Swal.fire({
            title: "Your order has been placed successfully.",
            text: `${document.getElementById('creator').textContent} is waiting for you!`,
            confirmButtonText: "Got it",
            confirmButtonColor: beautifulOrange
        });
    }

    // @desc paying by cash
    function payByCash() {
        fetch('/breakie/purchase/', {
            method: "POST",
            headers: {
                'Content-Type': "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify({ items: getObj() })
        }).
        then(res => { return res.json(); }).
        then( data => { successSwal(); }).
        catch( err => { console.log(err); })
    }

    //@desc when the user choose to pay by Card
    function payByCard(){
        let stripePublicKey = "<%= stripeAPIKey %>";
        let stripeHandler = StripeCheckout.configure({
            key: stripePublicKey,
            locale: "auto",
            token: function(token) {
                fetch('/breakie/purchase/', {
                    method: "POST",
                    headers: {
                        'Content-Type': "application/json",
                        "Accept": "application/json"
                    },
                    body: JSON.stringify({
                        stripeTokenId: token.id,
                        items: getObj()
                    })
                }).
                then( res => { return res.json(); }).
                then( data => { successSwal(); }).
                catch( err => { console.log(err); })
            }
        })
        stripeHandler.open({
            amount: parseFloat(document.getElementById("totalPrice").textContent) * 100
        });
    }
    
    function initMap() { 
        let breakie = JSON.parse(document.getElementById("breakie").innerText);
        let sellerCoords = {lat: parseFloat(breakie.creator.location.coordinates[1]), lng: parseFloat(breakie.creator.location.coordinates[0])};
        var map = new google.maps.Map(
            document.getElementById('indi-breakie-map'), {zoom: 14, center: sellerCoords });
        let marker = new google.maps.Marker({position: sellerCoords, map: map});
    }
</script>

<script async defer
src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&callback=initMap">
</script>