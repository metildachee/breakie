<span class="orange-text"><span class="bold"><%= breakies.length %></span> breakies near 
    <span id="currentAddr">you 
        <span class="badge badge-warning">
            Updated
        </span>
    </span>
</span>
<!-- <div class="container pr-0 mr-1"> -->
    <div class="row">
        <div class="col-md-8 grid">
            <p id="breakies" style="display: none"><%= JSON.stringify(breakies) %></p>
            <p id="sellers" style="display: none"><%= JSON.stringify(sellers) %></p>
            <% breakies.forEach( (breakie, index) => { %>
                <div class="cell m-1 line-height-60">
                    <div class="height-80">
                        <div class="mx-auto">
                            <img class="square-img" src="/image/<%= breakie.image %>" alt="">
                        </div>
                        <h6 class="cell-title"><%= breakie.name %></h6>
                        <p class="m-0 purple-text "><i class="fas fa-map-marker-alt"></i> <%= breakie.creator.address %>
                        </p>
                        <a class="m-0 purple-text" href="/user/show/<%= breakie.creator._id %>">@<%= breakie.creator.username %></a>
                        <span class="m-0 purple-text "><span><%= distance[index] %> </span>away <span class="badge badge-secondary"><%= breakie.cuisine.type %></span></span>
                        <% if (breakie.qty <= 0) { %>
                            <span class="badge badge-warning">Sold out</span>
                        <% } %> 
                    </div>
                    <p class="m-0 cell-price">$<%= breakie.price %>.00</p>
                    <a class="btn-original" href="/breakie/show/<%= breakie._id %>">See more</a>
                </div>
            <% }) %>
        </div>
        <div class="mapContainer">
        <!-- <div class="col-md-4"> -->
            <div class="absolute-right" id="map"><%= key %></div>
        </div>
    </div>
<!-- </div> -->
<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&callback=initMap">
</script>
<!-- <script
src="https://maps.googleapis.com/maps/api/js?key=<%= key %>>&callback=initMap&libraries=&v=weekly"
defer
></script> -->
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearchLite.min.js"></script>
<script src="https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js"></script>
<script>
    let currentPos;
    // @desc on page loads
    (function getCurrentLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                currentPos = { lat: position.coords.latitude, lng: position.coords.longitude };
                $.post("/", currentPos).
                done(() => console.log( "information sent" )).
                fail(() => console.log('an error occured'));
            })
        }
        else { console.log("an error occured");}
    })();

    let breakies = JSON.parse(document.getElementById("breakies").innerText);
    let sellers = JSON.parse(document.getElementById("sellers").innerText);

    for (const seller of sellers) {
        console.log(seller);
    }
    let distance = "<%= distance %>";
    console.log(distance);
    // @un-comment
    (function(exports) {
        "use strict";
        var popup, Popup;
        function initMap() {
            if (currentPos == undefined) currentPos = { lat: 1.3521, lng: 103.8198 };
            exports.map = new google.maps.Map(document.getElementById("map"), { center: currentPos, zoom: 14 });
            let marker = new google.maps.Marker({ position: currentPos, map: map });
            // breakies.forEach( breakie => {
            //     let newDiv = document.createElement("div");
            //     newDiv.textContent = breakie.name;
            //     let sellerCoords = {lat: parseFloat(breakie.creator.location.coordinates[1]), lng: parseFloat(breakie.creator.location.coordinates[0])};
            //     Popup = createPopupClass();
            //     popup = new Popup( new google.maps.LatLng(sellerCoords.lat, sellerCoords.lng), newDiv );
            //     popup.setMap(exports.map);         
            // })

            let index = 0;
            for (const seller of sellers) {
                console.log(seller);
                let newDiv = document.createElement("div");
                let distanceAway = (distance == undefined) ? seller.username : `${distance[index]} min`;
                // newDiv.textContent = (distance == undefined) ? seller.username : `${distance[index]} mins`;
                let sellerCoords = {lat: parseFloat(seller.location.coordinates[1]), lng: parseFloat(seller.location.coordinates[0])};
                // Popup = createPopupClass();
                // popup = new Popup(new google.maps.LatLng(sellerCoords.lat, sellerCoords.lng), newDiv);
                // popup.setMap(exports.map);         

                let marker = new google.maps.Marker({
                    icon: 'img/icon.svg', 
                    label: { text: distanceAway, color: "orange" },
                    position: sellerCoords, map: map
                });

                let contentString = `<div class="orange-text medium-text">`;
                seller.publishes.forEach( published => {
                    contentString += `<p class="mb-0">${published.name} (${published.qty}) @$${published.price}.00</p>`
                })
                contentString += `</div>`;
                console.log(contentString);
                let infowindow = new google.maps.InfoWindow({ content: contentString });
                marker.addListener('click', () => { infowindow.open(map, marker) });   
                index++;             
            }
            index = 0;
            if (currentPos != { lat: 1.3521, lng: 103.8198 }) updateNeighbour();
        }

        function updateNeighbour() {
            let geocoder = new google.maps.Geocoder();
            geocoder.geocode({ location: currentPos }, (results, status) => {
                if (status == "OK") document.getElementById("currentAddr").textContent = results[1].formatted_address;
            })  
        }

        function createPopupClass() {
            function Popup(position, content) {
                this.position = position;
                content.classList.add("popup-bubble");

                var bubbleAnchor = document.createElement("div");
                bubbleAnchor.classList.add("popup-bubble-anchor");
                bubbleAnchor.appendChild(content);

                this.containerDiv = document.createElement("div");
                this.containerDiv.classList.add("popup-container");
                this.containerDiv.appendChild(bubbleAnchor); 

                google.maps.OverlayView.preventMapHitsAndGesturesFrom(this.containerDiv);
            }

            Popup.prototype = Object.create(google.maps.OverlayView.prototype);
            Popup.prototype.onAdd = function() { this.getPanes().floatPane.appendChild(this.containerDiv); };
            Popup.prototype.onRemove = function() {
                if (this.containerDiv.parentElement) this.containerDiv.parentElement.removeChild(this.containerDiv);
            };

            Popup.prototype.draw = function() {
                var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);

                var display =
                Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000
                    ? "block"
                    : "none";

                if (display === "block") {
                this.containerDiv.style.left = divPosition.x + "px";
                this.containerDiv.style.top = divPosition.y + "px";
                }

                if (this.containerDiv.style.display !== display) this.containerDiv.style.display = display;
            };
            return Popup;
        }

        exports.createPopupClass = createPopupClass;
        exports.initMap = initMap;
      })((this.window = this.window || {}));

    // @desc algolia
    const client = algoliasearch('73KCNG918X', 'ca6e613de216883f20c2f6a51675b9bb');
    const breakie = client.initIndex('breakie');
    let currentInList = [];
    autocomplete(
        '#aa-search-input',
        {
            debug: true,
            templates: {
            dropdownMenu:
                '<div class="aa-dataset-player"></div>'
            },
        },
        [
            {
                source: autocomplete.sources.hits(breakie, {hitsPerPage: 7}),
                displayKey: 'name',
                name: 'player',
                templates: {
                    header: '<div class="aa-suggestions-category">Breakies</div>',
                    suggestion({_highlightResult}) {
                    console.log(_highlightResult);
                    currentInList = [];
                    currentInList.push(_highlightResult);
                    return `<span>${_highlightResult.name.value} <span class="grey-text">@${_highlightResult.creator.username.value}</span></span>`;
                    },
                    empty: '<div class="aa-empty">No matching breakies</div>',
                },
            },
        ]
    );
</script>