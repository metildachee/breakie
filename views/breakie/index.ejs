<span class="orange-text"><span class="bold"><%= breakies.length %></span> breakies near 
    <span id="currentAddr">you </span>
    <span id="login-prompt" class="badge badge-warning">
        Login to see breakies near you
    </span>
</span>
    <div class="row">
        <% let currUser = JSON.stringify(currentUser); %> 
        <div class="col-md-8 grid">
            <p id="breakies" style="display: none"><%= JSON.stringify(breakies) %></p>
            <p id="sellers" style="display: none"><%= JSON.stringify(sellers) %></p>
            <% let hoverArray = {}; %> 
            <% breakies.forEach( (breakie, index) => { %>
                <div class="cell m-1 line-height-60" id="index-<%= index %>">
                    <div class="height-80">
                        <div class="mx-auto">
                            <img class="square-img" src="/image/<%= breakie.image %>" alt="">
                        </div>
                        <h6 class="cell-title mb-0"><%= breakie.name %></h6>
                        <p class="m-0 purple-text "><i class="fas fa-map-marker-alt"></i> <%= breakie.creator.address %></p>
                        <a class="m-0 purple-text" href="/user/show/<%= breakie.creator._id %>">@<%= breakie.creator.username %></a>
                        <span class="badge badge-info"><%= distance[index] %> away</span> 
                        <span class="badge badge-secondary"><%= breakie.cuisine.type %></span>
                        <span class="badge badge-secondary"><%= breakie.qty %> portion(s)</span>
                        <% if (breakie.qty <= 0) { %>
                            <span class="badge badge-danger">Sold out</span>
                        <% } %> 
                    </div>
                    <p class="mt-3 cell-price">$<%= breakie.price %>.00</p>
                    <a class="btn-original" href="/breakie/show/<%= breakie._id %>">See more</a>
                    <% hoverArray[breakie.creator.username] == undefined ? hoverArray[breakie.creator.username] =  [index] : hoverArray[breakie.creator.username].push(index); %> 
                </div>
            <% }) %>
        </div>
        <div class="mapContainer">
            <div class="absolute-right" id="map"></div>
        </div>
        <% hoverArray = JSON.stringify(hoverArray) %>
    </div>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearchLite.min.js"></script>
<script src="https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js"></script>
<script src="/js/script.js"></script>
<script defer>
    let currentPos, breakies, sellers, distance, hoverArray, currUser, sellerDistance;
    /*
    * @desc this function gets the user's current location and makes a post request to the server
    */
    // (function getCurrentLocation() {
    //     if (!navigator.geolocation) return;
    //     navigator.geolocation.getCurrentPosition( 
    //         position => {
    //         currentPos = { lat: position.coords.latitude, lng: position.coords.longitude };
    //         $.post("/", currentPos).
    //         done(() => console.log( "Coordinates sent successfully" )).
    //         fail(() => console.log('An error occured during transmission.'));
    //     }, 
    //         err => { console.log(err); })
    // })();

    breakies = JSON.parse(document.getElementById("breakies").innerText);
    sellers = JSON.parse(document.getElementById("sellers").innerText);
    distance = "<%= distance %>".split(",");
    sellerDistance = "<%= sellerDistance %>".split(",");
    hoverArray = JSON.parse(<%- JSON.stringify(hoverArray) %>);
    if ('<%- currUser %>' == "") currentPos = { lat: 1.3521, lng: 103.8198 };
    else {
        currUser = JSON.parse(JSON.stringify(<%- currUser %>));
        currentPos = { lat: currUser.location.coordinates[1], lng: currUser.location.coordinates[0] };
        document.getElementById("login-prompt").classList.add("display-none");
    }

    // @desc inits the map
    function initMap() {       
        let index = 0, map, contentString, distanceAway, sellerCoords;

        map = new google.maps.Map(document.getElementById("map"), { center: currentPos, zoom: 10 });
        marker = new google.maps.Marker({ position: currentPos, map: map });

        for (const seller of sellers) {
            sellerCoords = {lat: parseFloat(seller.location.coordinates[1]), lng: parseFloat(seller.location.coordinates[0])};
            let marker = new google.maps.Marker({
                icon: 'img/icon.svg', 
                label: { text: `${sellerDistance[index]}`, color: "orange", fontWeight: "bold" },
                position: sellerCoords, map: map
            });

            marker.addListener('mouseover', e => { 
                hoverArray[seller.username].forEach( item => {
                    document.getElementById(`index-${item}`).classList.add("hover-color");
                })
            });

            marker.addListener('mouseout', e => { 
                hoverArray[seller.username].forEach( item => {
                    document.getElementById(`index-${item}`).classList.remove("hover-color");
                })
            });

            contentString = `<div class="orange-text medium-text">`;
            seller.publishes.forEach( published => {
                if (!published.deleted) 
                    contentString += `<p class="mb-0">${published.name} (${published.qty}) @$${published.price}.00</p>`
            })

            contentString += `</div>`;
            let infowindow = new google.maps.InfoWindow({ content: contentString });
            marker.addListener('click', () => { infowindow.open(map, marker) });   
            index++;             
        }
        index = 0;
        updateNeighbour();
    }

    function updateNeighbour() {
        let geocoder = new google.maps.Geocoder();
        geocoder.geocode({ location: currentPos }, (results, status) => {
            if (status == "OK") document.getElementById("currentAddr").textContent = results[1].formatted_address;
    })}

    // @desc algolia
    const client = algoliasearch('73KCNG918X', 'ca6e613de216883f20c2f6a51675b9bb');
    const breakie = client.initIndex('breakie');
    autocomplete(
        '#aa-search-input',
        {
            debug: true,
            templates: {
            dropdownMenu:
                '<div class="aa-dataset-player"></div>'
            },
        },
        [
            {
                source: autocomplete.sources.hits(breakie, {
                    hitsPerPage: 7,
                    filters: "deleted=0"
                }),                
                displayKey: 'name',
                name: 'player',
                templates: {
                    header: '<div class="aa-suggestions-category">Breakies</div>',
                    suggestion({_highlightResult}) {
                        let username = (_highlightResult.creator.username.value == undefined) ? "really_popular" : _highlightResult.creator.username.value;
                        return `<span>${_highlightResult.name.value} <span class="grey-text">@${username}</span></span>`;
                    },
                    empty: '<div class="aa-empty">No matching breakies</div>',
                },
            },
        ]
    );
</script>
<script async="false"
    src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&callback=initMap">
</script>